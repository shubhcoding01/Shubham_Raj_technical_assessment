{"ast":null,"code":"var _jsxFileName = \"E:\\\\Shubham_Raj_technical_assessment\\\\frontend\\\\src\\\\nodes\\\\TextNode.jsx\",\n  _s = $RefreshSig$();\nimport { Textarea } from \"@nextui-org/react\";\nimport { useState, useEffect } from \"react\";\nimport { Handle, Position } from \"reactflow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TextNode = ({\n  id,\n  data\n}) => {\n  _s();\n  const [currText, setCurrText] = useState((data === null || data === void 0 ? void 0 : data.text) || \"\");\n  const [handles, setHandles] = useState([]);\n  const defaultHandleStyle = {\n    background: \"#fff\",\n    width: \"15px\",\n    height: \"15px\",\n    border: \"1px solid #000\"\n  };\n\n  // Function to handle text changes\n  const handleTextChange = e => {\n    const text = e.target.value;\n    setCurrText(text);\n    updateHandlesForVariables(text);\n  };\n\n  // Function to extract variables from text and create handles\n  const updateHandlesForVariables = text => {\n    const regex = /\\{\\{([a-zA-Z_$][a-zA-Z0-9_$]*)\\}\\}/g;\n    const matches = [...text.matchAll(regex)];\n\n    // Create handles for unique variables found in the text\n    const newHandles = matches.map((match, index) => ({\n      id: `${id}-${match[1]}`,\n      variable: match[1],\n      style: {\n        top: `${(index + 1) * 15}%`\n      }\n    }));\n    setHandles(newHandles);\n  };\n  useEffect(() => {\n    updateHandlesForVariables(currText);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `px-5 py-4 w-80 border-2 bg-white flex flex-col gap-2 border-blue-600 shadow-lg rounded-lg `,\n    children: [/*#__PURE__*/_jsxDEV(Handle, {\n      type: \"source\",\n      position: Position.Right,\n      id: `${id}-output`,\n      className: \"bg-white w-3 h-3 rounded-full border-1 border-purple-500\",\n      style: defaultHandleStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Textarea, {\n        label: \"Prompt\",\n        placeholder: \"Enter text with variables like {{context}}\",\n        value: currText,\n        onChange: handleTextChange,\n        variant: \"bordered\",\n        radius: \"full\",\n        className: \"w-full h-full text-xl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), handles.map((handle, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        left: 0,\n        top: handle.style.top\n      },\n      children: [/*#__PURE__*/_jsxDEV(Handle, {\n        type: \"target\",\n        position: Position.Left,\n        id: handle.id,\n        className: \"bg-white w-3 h-3 rounded-full border-1 border-purple-500\",\n        style: defaultHandleStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"relative\",\n          top: \"10px\",\n          left: \"-35px\",\n          fontSize: \"12px\",\n          color: \"gray\",\n          width: \"100px\"\n        },\n        children: handle.variable\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)]\n    }, handle.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(TextNode, \"mJiiKRHIho850QFEmRltwsRmNUI=\");\n_c = TextNode;\nvar _c;\n$RefreshReg$(_c, \"TextNode\");","map":{"version":3,"names":["Textarea","useState","useEffect","Handle","Position","jsxDEV","_jsxDEV","TextNode","id","data","_s","currText","setCurrText","text","handles","setHandles","defaultHandleStyle","background","width","height","border","handleTextChange","e","target","value","updateHandlesForVariables","regex","matches","matchAll","newHandles","map","match","index","variable","style","top","className","children","type","position","Right","fileName","_jsxFileName","lineNumber","columnNumber","label","placeholder","onChange","variant","radius","handle","left","Left","fontSize","color","_c","$RefreshReg$"],"sources":["E:/Shubham_Raj_technical_assessment/frontend/src/nodes/TextNode.jsx"],"sourcesContent":["import { Textarea } from \"@nextui-org/react\";\nimport { useState, useEffect } from \"react\";\nimport { Handle, Position } from \"reactflow\";\n\nexport const TextNode = ({ id, data }) => {\n  const [currText, setCurrText] = useState(data?.text || \"\");\n  const [handles, setHandles] = useState([]);\n\n  const defaultHandleStyle = {\n    background: \"#fff\",\n    width: \"15px\",\n    height: \"15px\",\n    border: \"1px solid #000\",\n  };\n\n  // Function to handle text changes\n  const handleTextChange = (e) => {\n    const text = e.target.value;\n    setCurrText(text);\n    updateHandlesForVariables(text);\n  };\n\n  // Function to extract variables from text and create handles\n  const updateHandlesForVariables = (text) => {\n    const regex = /\\{\\{([a-zA-Z_$][a-zA-Z0-9_$]*)\\}\\}/g;\n    const matches = [...text.matchAll(regex)];\n\n    // Create handles for unique variables found in the text\n    const newHandles = matches.map((match, index) => ({\n      id: `${id}-${match[1]}`,\n      variable: match[1],\n      style: { top: `${(index + 1) * 15}%` },\n    }));\n\n    setHandles(newHandles);\n  };\n\n  useEffect(() => {\n    updateHandlesForVariables(currText);\n  }, []);\n\n  return (\n    <div\n      className={`px-5 py-4 w-80 border-2 bg-white flex flex-col gap-2 border-blue-600 shadow-lg rounded-lg `}\n    >\n      <Handle\n        type=\"source\"\n        position={Position.Right}\n        id={`${id}-output`}\n        className=\"bg-white w-3 h-3 rounded-full border-1 border-purple-500\"\n        style={defaultHandleStyle}\n      />\n      <div>\n        <Textarea\n          label=\"Prompt\"\n          placeholder=\"Enter text with variables like {{context}}\"\n          value={currText}\n          onChange={handleTextChange}\n          variant=\"bordered\"\n          radius=\"full\"\n          className=\"w-full h-full text-xl\"\n        />\n      </div>\n\n      {/* Dynamically render handles and variable labels for variables */}\n      {handles.map((handle, index) => (\n        <div\n          key={handle.id}\n          style={{ position: \"absolute\", left: 0, top: handle.style.top }}\n        >\n          <Handle\n            type=\"target\"\n            position={Position.Left}\n            id={handle.id}\n            className=\"bg-white w-3 h-3 rounded-full border-1 border-purple-500\"\n            style={defaultHandleStyle}\n          />\n          <div\n            style={{\n              position: \"relative\",\n              top: \"10px\",\n              left: \"-35px\",\n              fontSize: \"12px\",\n              color: \"gray\",\n              width: \"100px\",\n            }}\n          >\n            {handle.variable}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}